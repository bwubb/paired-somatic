
'''
This is old varScan2 code. It used v2.3.9 calling method, but 2.4.3 filtering.
'''

def paired_pileup(wildcards):
    targets=config['resources']['library']['targets_key']
    tumor=wildcards.tumor
    normal=PAIRS[wildcards.tumor]
    return {'tumor':'data/work/{tumor}/{targets}/sequenza/raw.mpileup'.format(tumor=tumor,targets=targets),'normal':'data/work/{normal}/{targets}/sequenza/raw.mpileup'.format(normal=normal,targets=targets)}

rule VarScan:#Add no sort option?
    input:
        #I dont recall if limiting to target mpileup worked.
        unpack(paired_pileup),
        CP="data/work/{tumor}/{targets}/sequenza/{tumor}_confints_CP.txt"#want to change tumor to somatic
    output:
        #raw="data/work/{tumor}/{targets}/varscan/varscan.raw.vcf",#rename
        indel="data/work/{tumor}/{targets}/varscan/varscan.indel.vcf",
        snp="data/work/{tumor}/{targets}/varscan/varscan.snp.vcf"#Note the none plural
    params:
        prefix=lambda wildcards: "data/work/{tumor}/{targets}/varscan/varscan".format(tumor=wildcards.tumor,targets=wildcards.targets),
        args='--min-coverage 3 --min-var-freq 0.08 --p-value 0.10 --somatic-p-value 0.05 --strand-filter 0',
        #purity=get_purity,
        memory='16g'
    #shell:
    run:
        with open(input["CP"],'r') as file:
            lines=file.read().splitlines()
            purity=lines[3].split('\t')[0]#3 for max
        shell(f"java -Xmx{params.memory} -jar $HOME/software/VarScan/VarScan.v2.3.9.jar somatic {input.normal} {input.tumor} {params.prefix} --output-vcf 1 --tumor-purity {purity} {params.args}")
        #bcftools concat -a {output.snp} {output.indel} | bcftools sort -O z -o {output.raw} && tabix -p vcf {output.raw}
        #SS=2

rule VarScan_filter:
    input:
        snp="data/work/{tumor}/{targets}/varscan/varscan.snp.vcf",
        indel="data/work/{tumor}/{targets}/varscan/varscan.indel.vcf"
    output:
        "data/work/{tumor}/{targets}/varscan/varscan.snp.Somatic.vcf",
        "data/work/{tumor}/{targets}/varscan/varscan.indel.Somatic.vcf",
        "data/work/{tumor}/{targets}/varscan/varscan.snp.LOH.vcf",
        "data/work/{tumor}/{targets}/varscan/varscan.indel.LOH.vcf",
        "data/work/{tumor}/{targets}/varscan/varscan.snp.Germline.vcf",
        "data/work/{tumor}/{targets}/varscan/varscan.indel.Germline.vcf"
    params:
        #--min-tumor-freq - Minimum variant allele frequency in tumor [0.10]
        #--max-normal-freq - Maximum variant allele frequency in normal [0.05]
        #--p-value - P-value for high-confidence calling [0.07]
    shell:
            """
            java -jar ~/software/VarScan/VarScan.v2.4.3.jar processSomatic {input.snp}
            java -jar ~/software/VarScan/VarScan.v2.4.3.jar processSomatic {input.indel}
            """

rule bam_readcount_regions:
    #variant=snp or indel
    #type=somatic or LOH
    input:
        "data/work/{tumor}/{targets}/varscan/varscan.{mut}.{class}.vcf"
    output:
        "data/work/{tumor}/{targets}/varscan/varscan.{mut}.{class}.regions"
    script:
        "bam-readcount_regions-snakemake.py"

rule bam_readcount:
    input:
        bam=readcount_bam,
        regions="data/work/{tumor}/{targets}/varscan/varscan.{mut}.{class}.regions"
    output:
        "data/work/{tumor}/{targets}/varscan/varscan.{mut}.{class}.readcounts"
    params:
        ref=config['resources']['reference']['fasta']
    run:
        if wildcards.mut=='indel':
            shell("bam-readcount -i -b 15 -q 1 -w 1 -f {params.ref} -l {input.regions} {input.bam} > {output}")
        else:
            shell("bam-readcount -b 15 -q 1 -w 1 -f {params.ref} -l {input.regions} {input.bam} > {output}")

        #the precision of variant and mutation calling by removing artifacts associated with short-read alignment.
        #-For somatic mutations, generate bam-readcounts with the Tumor BAM. For LOH and Germline, generate readcounts with the Normal BAM
        #-For de novo mutations (trio calling), generate readcounts with the child BAM.
        #The filter requires the bam-readcount utility: https://github.com/genome/bam-readcount

rule fpfilter:
    input:
        vcf="data/work/{tumor}/{targets}/varscan/varscan.{mut}.{class}.vcf",
        readcount="data/work/{tumor}/{targets}/varscan/varscan.{mut}.{class}.readcounts"
    output:
        "data/work/{tumor}/{targets}/varscan/varscan.{mut}.{class}.fpfilter.vcf.gz"
    params:
        output="data/work/{tumor}/{targets}/varscan/varscan.{mut}.{class}.fpfilter.vcf"
    shell:
        """
        java -jar ~/software/VarScan/VarScan.v2.4.3.jar fpfilter {input.vcf} {input.readcount} --output-file {params.output}
        bgzip {params.output} && tabix -p vcf {output}
        """

rule merge_varscan_somatic:
    input:
        snp="data/work/{tumor}/{targets}/varscan/varscan.snp.Somatic.fpfilter.vcf.gz",
        indel="data/work/{tumor}/{targets}/varscan/varscan.indel.Somatic.fpfilter.vcf.gz"
    output:
        "data/work/{tumor}/{targets}/varscan/somatic.fpfilter.vcf.gz"#plural again
    shell:
        "bcftools concat -a {input.snp} {input.indel} | bcftools sort -O z -o {output} && tabix -p vcf {output}"

rule merge_varscan_loh:
    input:
        snp="data/work/{tumor}/{targets}/varscan/varscan.snp.LOH.fpfilter.vcf.gz",
        indel="data/work/{tumor}/{targets}/varscan/varscan.indel.LOH.fpfilter.vcf.gz"
    output:
        "data/work/{tumor}/{targets}/varscan/loh.fpfilter.vcf.gz"#plural again
    shell:
        "bcftools concat -a {input.snp} {input.indel} | bcftools sort -O z -o {output} && tabix -p vcf {output}"

rule merge_varscan_germline:
    input:
        snp="data/work/{tumor}/{targets}/varscan/varscan.snp.Germline.fpfilter.vcf.gz",
        indel="data/work/{tumor}/{targets}/varscan/varscan.indel.Germline.fpfilter.vcf.gz"
    output:
        "data/work/{tumor}/{targets}/varscan/germline.fpfilter.vcf.gz"#plural again
    shell:
        "bcftools concat -a {input.snp} {input.indel} | bcftools sort -O z -o {output} && tabix -p vcf {output}"
