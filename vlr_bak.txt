#Testing previous method
#rule varlociraptor_local_fdr:
#    input:
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.bcf"
#    output:
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.bcf"
#    params:
#        fdr=0.05
#    shell:
#        """
#        varlociraptor filter-calls control-fdr --local {input} --events SOMATIC_TUMOR --fdr {params.fdr} > {output}
#        bcftools index {output}
#        """

#need some rules to split snv and indel/mnp, and set lower fdr for indels. 0.03
#rule varlociraptor_split:
#    input:
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.bcf"
#    output:
#        snps="data/work/{lib}/{tumor}/varlociraptor/{scenario}.snps.bcf",
#        indels="data/work/{lib}/{tumor}/varlociraptor/{scenario}.indels.bcf"
#    shell:
#        """
#        bcftools view -v snps -O b -o {output.snps} {input}
#        bcftools view -v indels,mnps -O b -o {output.indels} {input}
#        """


#rename to somatic_tumor
#rule varlociraptor_local_fdr_somatic_tumor_snps:
#    input:
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.snps.bcf"
#    output:
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.somatic_tumor.snps.bcf"
#    params:
#        fdr=0.05
#    shell:
#        """
#        varlociraptor filter-calls control-fdr --mode local-smart {input} --events SOMATIC_TUMOR --fdr {params.fdr} > {output}
#        bcftools index {output}
#        """
#        #IT LOOK SLIKE --local is no longer the thing, but rather --mode local-smart

#rule varlociraptor_local_fdr_somatic_tumor_indels:
#    input:
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.indels.bcf"
#    output:
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.somatic_tumor.indels.bcf"
#    params:
#        fdr=0.03
#    shell:
#        """
#        varlociraptor filter-calls control-fdr --mode local-smart {input} --events SOMATIC_TUMOR --fdr {params.fdr} > {output}
#        bcftools index {output}
#        """

#rule varlocirator_merge_somatic_tumor:
#    input:
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.somatic_tumor.snps.bcf",
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.somatic_tumor.indels.bcf"
#    output:
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.somatic_tumor.snps.indels.bcf"
#    shell:
#        """
#        bcftools concat -a {input} | bcftools sort -O b -o {output}
#        bcftools index {output}
#        """

#One rule for germline
#rule varlociraptor_local_fdr_germline:
#    input:
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.bcf"
#    output:
#        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.germline.bcf"
#    params:
#        fdr=0.05
#    shell:
#        """
#        varlociraptor filter-calls control-fdr --mode global-smart {input} --events GERMLINE --fdr {params.fdr} > {output}
#        bcftools index {output}
#        """



#"data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.somatic.snps.indels.bcf"
rule bcftools_annotate_somatic:
    input:
        bcf="data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.somatic_tumor.snps.indels.bcf",
        sites="data/work/{lib}/{tumor}/varlociraptor/paired_somatic.bcf"
    output:
        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_somatic.bcf"
    shell:
        """
        bcftools annotate -a {input.sites} -c LANCET,MUTECT2,STRELKA2,VARDICT,VARSCAN2,CATEGORY -Ob -W=csi -o {output} {input.bcf}
        """

rule bcftools_annotate_germline:
    input:
        bcf="data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.germline.bcf",
        sites="data/work/{lib}/{tumor}/varlociraptor/paired_somatic.bcf"
    output:
        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_germline.bcf"
    shell:
        """
        bcftools annotate -a {input.sites} -c LANCET,MUTECT2,STRELKA2,VARDICT,VARSCAN2 -O b -o {output} {input.bcf}
        """

rule varlociraptor_somatic_vep:
    input:
        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_somatic.bcf"
    output:
        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_somatic.vep.vcf.gz"
    params:
        in_vcf=temp('data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_somatic.vcf'),
        out_vcf='data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_somatic.vep.vcf',
        assembly=config['reference']['key'],
        fa=config['reference']['fasta'],
        splice_snv=config['resources']['splice_snv'],
        splice_indel=config['resources']['splice_indel'],
        gnomAD=config['resources']['gnomAD'],
        clinvar=config['resources']['clinvar'],
        revel=config['resources']['revel'],
        loftee='$HOME/.vep/Plugins/loftee',#check
        utr=config['resources']['utrannotator'],
        ref_fa="data/work/{lib}/{tumor}/varlociraptor/{scenario}.reference.fa",
        mut_fa="data/work/{lib}/{tumor}/varlociraptor/{scenario}.mutated.fa"
    shell:
        """
        bcftools view -O v -o {params.in_vcf} {input}

        singularity run -H $PWD:/home \
        --bind /home/bwubb/resources:/opt/vep/resources \
        --bind /home/bwubb/.vep:/opt/vep/.vep \
        /appl/containers/vep112.sif vep \
        --dir /opt/vep/.vep \
        -i {params.in_vcf} -o {params.out_vcf} \
        --force_overwrite \
        --offline \
        --cache \
        --format vcf \
        --vcf \
        --everything \
        --canonical \
        --assembly {params.assembly} \
        --species homo_sapiens \
        --fasta {params.fa} \
        --vcf_info_field ANN \
        --plugin NMD \
        --plugin Downstream \
        --plugin REVEL,{params.revel} \
        --plugin SpliceAI,snv={params.splice_snv},indel={params.splice_indel} \
        --plugin gnomADc,{params.gnomAD} \
        --plugin UTRannotator,{params.utr} \
        --custom {params.clinvar},ClinVar,vcf,exact,0,CLNSIG,CLNREVSTAT,CLNDN \
        --plugin AlphaMissense,file=/home/bwubb/.vep/alphamissense/AlphaMissense_GRCh38.tsv.gz \
        --plugin MaveDB,file=/home/bwubb/.vep/mavedb/MaveDB_variants.tsv.gz

        bgzip {params.out_vcf}
        tabix -fp vcf {output}
        """
        #loftee cut again until after lab meeting
        #--plugin LoF,loftee_path:$HOME/software/loftee,human_ancestor_fa:$HOME/.vep/Plugins/loftee/human_ancestor.fa.gz
        #--plugin ProteinSeqs,{params.ref_fa},{params.mut_fa} \
        #move ref mut fa to output after testing is complete.
        #possibly bgzip/index output fasta file

#I need to go back to old snakemake parsing for proper github pathing
rule varlociraptor_somatic_vep_report:
    input:
        vcf="data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_somatic.vep.vcf.gz"
    output:
        csv="data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_somatic.vep.report.csv"
    params:
        normal=lambda wildcards: PAIRS[wildcards.tumor]
    shell:
        """
        python vep_vcf_parser.py -i {input.vcf} -o {output.csv} --mode tumor_normal,{wildcards.tumor},{params.normal} everything
        """

rule varlociraptor_estimate_mutational_burden:
    input:
        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_somatic.vep.vcf.gz"
    output:
        bcf="data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_somatic.vep.bcf",
        json="data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_somatic.vep.tmb.json"
        #"data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_somatic.vep.tmb.svg"
    params:
        size=genome_size
    shell:
        """
        bcftools view -O b -o {output.bcf} {input}
        varlociraptor estimate mutational-burden --plot-mode curve --coding-genome-size {params.size} --sample tumor --events SOMATIC_TUMOR < {output.bcf} > {output.json}
        """

rule bcftools_isec:
    input:
        lancet="data/work/{lib}/{tumor}/lancet/somatic.norm.clean.vcf.gz",
        mutect2="data/work/{lib}/{tumor}/mutect2/somatic.filtered.norm.clean.vcf.gz",
        strelka2="data/work/{lib}/{tumor}/strelka2/somatic.norm.clean.vcf.gz",
        vardict="data/work/{lib}/{tumor}/vardict/somatic.twice_filtered.norm.clean.vcf.gz",
        varscan2="data/work/{lib}/{tumor}/varscan2/somatic.fpfilter.norm.clean.vcf.gz"
    output:
        "data/work/{lib}/{tumor}/varlociraptor/somatic_sites.txt"
    shell:
        """
        bcftools isec -n+1 {input.lancet} {input.mutect2} {input.strelka2} {input.vardict} {input.varscan2} > {output}
        """

rule varlociraptor_germline_vep:
    input:
        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_germline.bcf"
    output:
        "data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_germline.vep.vcf.gz"
    params:
        in_vcf=temp('data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.germline_somatic.vcf'),
        out_vcf='data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_germline.vep.vcf',
        assembly=config['reference']['key'],
        fa=config['reference']['fasta'],
        splice_snv=config['resources']['splice_snv'],
        splice_indel=config['resources']['splice_indel'],
        gnomAD=config['resources']['gnomAD'],
        clinvar=config['resources']['clinvar'],
        revel=config['resources']['revel'],
        loftee='$HOME/.vep/Plugins/loftee',#check
        utr=config['resources']['utrannotator']
    shell:
        """
        bcftools view -O v -o {params.in_vcf} {input}

        singularity run -H $PWD:/home \
        --bind /home/bwubb/resources:/opt/vep/resources \
        --bind /home/bwubb/.vep:/opt/vep/.vep \
        /appl/containers/vep112.sif vep \
        --dir /opt/vep/.vep \
        -i {params.in_vcf} -o {params.out_vcf} \
        --force_overwrite \
        --offline \
        --cache \
        --format vcf \
        --vcf \
        --everything \
        --canonical \
        --assembly {params.assembly} \
        --species homo_sapiens \
        --fasta {params.fa} \
        --vcf_info_field ANN \
        --plugin NMD \
        --plugin Downstream \
        --plugin REVEL,{params.revel} \
        --plugin SpliceAI,snv={params.splice_snv},indel={params.splice_indel} \
        --plugin gnomADc,{params.gnomAD} \
        --plugin UTRannotator,{params.utr} \
        --plugin LoF,loftee_path:$HOME/software/loftee,human_ancestor_fa:$HOME/.vep/Plugins/loftee/human_ancestor.fa.gz \
        --custom {params.clinvar},ClinVar,vcf,exact,0,CLNSIG,CLNREVSTAT,CLNDN

        bgzip {params.out_vcf}
        tabix -fp vcf {output}
        """
        #ProteinSeqs removed

rule varlociraptor_germline_vep_report:
    input:
        vcf="data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_germline.vep.vcf.gz"
    output:
        csv="data/work/{lib}/{tumor}/varlociraptor/{scenario}.local-fdr.paired_germline.vep.report.csv"
    params:
        normal=lambda wildcards: PAIRS[wildcards.tumor]
    shell:
        """
        python vep_vcf_parser.py -i {input.vcf} -o {output.csv} --mode tumor_normal,{wildcards.tumor},{params.normal} everything
        """
