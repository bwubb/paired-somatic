

import csv
import os
import datetime
from collections import defaultdict

if not config:
    config=defaultdict(lambda : defaultdict(str))

with open('tumors.list','r') as file:
    SAMPLES=file.read().splitlines()

with open('/home/bwubb/resources/annovar/summary.header.txt','r') as file:
    HEADER=file.read().splitlines()

DATE=datetime.date.today().strftime("%Y%m%d")
PROJECT=config.get('project',{}).get('run_name','_project_run-'+DATE)

localrules: summary_all


rule all:
    input:
        "{project}.mutect2.pass.hg19_multianno.summary.{date}.tsv".format(project=config['project'].get('name',os.getcwd()),date=DATE)

#wildcard and dir naming is not unified between scripts

rule select_sample:
    input:
        "data/work/{sample}/GRCh37/{caller}.vcf.gz"
    output:
        "data/work/{sample}/{targets}/{caller}.pass.vcf.gz"
    params:
        reference=config['resources']['reference']['fasta'],
        intervals=config['resources']['library']['intervals']
    shell:
        "java -Xmx5g -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T SelectVariants -V {input} -o {output} -L {params.intervals} -sn {wildcards.sample} -env -ef -trimAlternates"

rule convert_vcf2annovar:
    input:
        "data/work/{sample}/{targets}/{caller}.pass.vcf.gz"
    output:
        "data/work/{sample}/{targets}/{caller}.pass.avinput"
    shell:
        "convert2annovar.pl -format vcf4 -includeinfo -allsample -withfreq {input} | awk -F\"\t\" 'BEGIN {{ OFS=FS }} {{ print $1,$2,$3,$4,$5,$14,$15,$16,$17,$18 }}' > {output}"

rule table_annovar:
    input:
        "data/work/{sample}/{targets}/{caller}.pass.avinput"
    params:
        out="data/work/{sample}/{targets}/{caller}.pass",
        humandb="/home/bwubb/humandb",
        protocol="refGene,cytoband,gwasCatalog,genomicSuperDups,dbnsfp31a_interpro,dbscsnv11,dbnsfp30a,snp138,snp138NonFlagged,cosmic70,popfreq_all_20150413,exac03nontcga,nci60,clinvar_20160302",
        operation="g,r,r,r,f,f,f,f,f,f,f,f,f,f"
    output:
        "data/work/{sample}/{targets}/{caller}.pass.hg19_multianno.txt"
    shell:
        "table_annovar.pl {input} {params.humandb} -build hg19 --outfile {params.out} -protocol {params.protocol} -operation {params.operation} -otherinfo "

#Consider vcf filtering methods. Could make vcf output

def summary_input(wildcards):
    return expand("data/work/{sample}/{targets}/{caller}.pass.hg19_multianno.summary.tsv",sample=SAMPLES,targets=config['resources']['targets']['key'],caller=wildcards.caller)

rule multianno_summary:
    input:
        "data/work/{sample}/{targets}/{caller}.pass.hg19_multianno.txt"
    output:
        "data/work/{sample}/{targets}/{caller}.pass.hg19_multianno.summary.tsv"
    params:
        PR=config['project'].get('name',os.getcwd())
    shell:
        "python gatk_multianno.py --input_fp {input} --output_fp {output} --SM {wildcards.sample} --PR {params.PR} --LB {wildcards.targets} --VC {wildcards.caller}"

rule summary_all:
    input:
        summary_input
    output:
        "{project}.{caller}.pass.hg19_multianno.summary.{date}.tsv"
    params:
        header=HEADER,
        date=DATE
    run:
        with open(output[0],'w') as out:
            writer=csv.DictWriter(out,delimiter='\t',fieldnames=params.header)
            writer.writeheader()
            for i in input:
                with open(i,'r') as file:
                    reader=csv.DictReader(file,delimiter='\t')
                    for row in reader:
                        writer.writerow(row)
