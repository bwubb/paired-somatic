

## SAMPLES ##
with open(config.get('project',{}).get('sample_list','samples.list'),'r') as i:
    SAMPLES=i.read().splitlines()

with open(config.get('project',{}).get('pairs_list','pairs.list'),'r') as p:
    PAIRS=dict(line.split('\t') for line in p.read().splitlines())
    TUMORS=PAIRS.keys()
    NORMALS=list(set(PAIRS.values()))

## BAMS ##
if config['project'].get('bam_list',False):
    with open(config['project']['bam_list'],'r') as b:
        BAMS=dict(line.split('\t') for line in b.read().splitlines())
else:
    BAMS=False
    missing_bam=0
    for sample in SAMPLES:
        if not os.path.isfile('bam_input/final/{sample}/{reference}/{sample}.ready.bam'.format(sample=sample,reference=config['resources']['reference']['key'])):
            print('WARNING: < %s > Missing BAM!' % sample)
            missing_bam+=1
        if missing_bam>0:
            raise

def sample_bam(wildcards):
    if getattr(wildcards,'tumor',False):
        name=wildcards.tumor
    elif getattr(wildcards,'normal',False):
        name=wildcards.normal
    else:
        name=wildcards.sample
    if config['project'].get('bam_list',False):
        return BAMS[name]
    return 'bam_input/final/{sample}/{reference}/{sample}.ready.bam'.format(sample=name,reference=config['resources']['reference']['key'])

def sample_chr_gvcf(wildcards):
    #This returns a dict of sample:sample.gvcf
    files={}
    for sample in SAMPLES:
        files[sample]=f'data/work/{sample}/gatk/chr{wildcards.chr}.g.vcf.gz'
    return files
    #return expand("data/work/{sample}/gatk/chr{wildcards.chr}.g.vcf.gz",sample=SAMPLES,wildcards=wildcards)

def NORMALS_gvcf_input(wildcards):
    return expand("data/work/{sample}/gatk/chr{chr}.g.vcf.gz",sample=NORMALS,chr=wildcards.chr)

def NORMALS_gatk_gvcf_input(wildcards):
    return ' '.join([f'-V data/work/{sample}/gatk/chr{wildcards.chr}.g.vcf.gz' for sample in NORMALS])

def normal_chr_vcf_input(wildcards):
    #assuring proper chr order
    return [f"data/work/{wildcards.project}/gatk/vcf_files/normals_chr{chr}.vcf.gz" for chr in list(range(1,23))+['X']]

def matched_normal_het_sites(wildcards):
    return f"data/work/{PAIRS[wildcards.sample]}/{wildcards.targets}/gatk/haplotype_caller.het_sites.vcf.gz"

localrules: sampleNameMapFile_byChr

rule all:
    input:
        expand("data/work/{sample}/{targets}/gatk/haplotype_caller.het_sites.vcf.gz",sample=NORMALS,targets=config['resources']['library']['targets_key'])

rule HaplotypeCaller_byChr:
    input:
        sample_bam
    output:
        "data/work/{sample}/gatk/chr{chr}.g.vcf.gz"
    params:
        ref=config['resources']['reference']['fasta'],
        chr=lambda wildcards: wildcards.chr
    shell:
        "gatk --java-options '-Xmx16g' HaplotypeCaller -R {params.ref} -I {input} -L {params.chr} -G StandardAnnotation -G AS_StandardAnnotation --emit-ref-confidence GVCF -O {output}"

rule HaplotypeCaller_GermlineSites:
    input:
        bam=sample_bam,
        het_sites=matched_normal_het_sites
    output:
        "data/work/{sample}/{targets}/gatk/germline_het_sites.g.vcf.gz"
    params:
        ref=config['resources']['reference']['fasta']
    shell:
        "gatk --java-options '-Xmx16g' HaplotypeCaller -R {params.ref} -L {input.het_sites} -I {input.bam} -G StandardAnnotation -G AS_StandardAnnotation --emit-ref-confidence GVCF -O {output}"

rule GenotypeGVCF_tumor:
    input:
        "data/work/{tumor}/{targets}/gatk/germline_het_sites.g.vcf.gz"
    output:
        "data/work/{tumor}/{targets}/gatk/germline_het_sites.vcf.gz"
    params:
        ref=config['resources']['reference']['fasta']
    shell:
        "gatk --java-options '-Xmx16g' GenotypeGVCFs -R {params.ref} -V {input} -O {output}"

rule CombineGVCFs_normals:
    input:
        NORMALS_gvcf_input
    output:
        "data/work/{project}/gatk/gvcf_files/normals_chr{chr}.g.vcf.gz"
    params:
        reference=config['resources']['reference']['fasta'],
        variants=NORMALS_gatk_gvcf_input
    shell:
        "gatk --java-options '-Xmx16g' CombineGVCFs {params.variants} -O {output} -R {params.reference}"

rule GenotypeGVCF_normals:
    #In the past it was suggested by the GATK staff
    #That Intervals at this section dont work.
    #Instead do the whole chr and then subset the vcf
    input:
        "data/work/{project}/gatk/gvcf_files/normals_chr{chr}.g.vcf.gz"
    output:
        "data/work/{project}/gatk/vcf_files/normals_chr{chr}.vcf.gz"
    params:
        ref=config['resources']['reference']['fasta']
    shell:
        "gatk --java-options '-Xmx16g' GenotypeGVCFs -R {params.ref} -V {input} -O {output}"

rule concat_vcf_target_restricted:
    input:
        normal_chr_vcf_input
    output:
        "data/work/{project}/gatk/vcf_files/normals_{targets}.vcf.gz"
    params:
        #VCF, BED, or tab-delimited file
        targets=config['resources']['library']['targets_bed'],
        temp=lambda wildcards: f'data/work/{wildcards.project}/gatk/vcf_files/'
    shell:
        "bcftools concat -a -R {params.targets} {input} | bcftools sort -m 16G -T {params.temp} -O z -o {output}"

rule select_normal_sample:
    input:
        f"data/work/{config['project']['name']}/gatk/vcf_files/normals_{config['resources']['library']['targets_key']}.vcf.gz"
    output:
        vcf="data/work/{sample}/{targets}/gatk/haplotype_caller.raw.vcf.gz",
        het_sites="data/work/{sample}/{targets}/gatk/haplotype_caller.het_sites.vcf.gz"
    params:
        ref=config['resources']['reference']['fasta']
    shell:
        """
        bcftools view -s {wildcards.sample} -O z -o {output.vcf} {input} && tabix -p vcf {output.vcf}
        bcftools norm -m -any {output.vcf} | bcftools norm -c s -f {params.ref} | bcftools view -U -g ^hom -v snps,indels -O z -o {output.het_sites} && tabix -p vcf {output.het_sites}
        """
        #bcftools norm -m -any haplotype_caller.raw.vcf.gz | bcftools norm -c s -f ~/resources/Genomes/Human/GRCh37/human_g1k_v37.fasta | bcftools view -v snps
        #I can include indels and remove *'s still
        #-a --trim-alt-alleles
        #-U --exclude-uncalled
        #-H no header
        ## GATK needs the het sites to have a vcf header, but a new (simple) header could be made
        #What sort of AF filtering should I apply, some of the germline sites are probably pretty bad.



# GGA only will genotype the allele if it is present, it will not put 0/0 if it is absent.
#--genotyping_mode GENOTYPE_GIVEN_ALLELES \ --alleles mySNPs.vcf \ -L mySNPs.vcf


rule sampleNameMapFile_byChr:
    input:
        unpack(sample_chr_gvcf)
    output:
        'data/work/{project}/gatk/chr{chr}.sample_map'
    run:
        with open(output[0],'w') as outfile:
            for sample,file in input.items():
                outfile.write(f'{sample}\t{file}\n')

rule GenomicsDBImport_byChr:
    input:
        'data/work/{project}/gatk/chr{chr}.sample_map'
    output:
        directory("data/work/{project}/gatk/db/chr{chr}.db")
    params:
        chr=lambda wildcards: wildcards.chr,
        ref=config['resources']['reference']['fasta']
    shell:
        "gatk --java-options '-Xmx60g' GenomicsDBImport -R {params.ref} --sample-name-map {input} --genomicsdb-workspace-path {output} --intervals {params.chr}"

rule GenomicsDBImport_byChr_interval:
    input:
        'data/work/{project}/gatk/chr{chr}.sample_map'
    output:
        directory("data/work/{project}/gatk/db/chr{chr}.db")
    params:
        chr=lambda wildcards: wildcards.chr,
        ref=config['resources']['reference']['fasta']
    run:
        with open(targets.intervals,'r') as file:
            intervals=[line for line in file.read().splitlines() if line.startswith(f'{params.chr}:')]
        for L in intervals:
            print(L)
            shell("gatk --java-options '-Xmx15g' GenomicsDBImport -R {params.ref} --sample-name-map {input[0]} --genomicsdb-workspace-path {output[0]} --intervals {L}")


rule GenotypeGVCFs_byChr_fromdb:
    input:
        "data/work/{project}/gatk/db/chr{chr}.db"
    output:
        "data/work/{project}/gatk/vcf_files/chr{chr}.vcf.gz"
    params:
        ref=config['resources']['reference']['fasta']
        #chr=lambda wildcards: wildcards.chr
        #intervals=(does this work if I dont subset the intervals?)
    shell:
        "gatk --java-options '-Xmx60g' GenotypeGVCFs -R {params.ref} -V gendb://{input} -O {output}"


