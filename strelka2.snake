

with open(config.get('project',{}).get('sample_list','samples.list'),'r') as s:
    SAMPLES=s.read().splitlines()

with open(config.get('project',{}).get('pair_list','pairs.list'),'r') as p:
    PAIRS=dict(line.split('\t') for line in p.read().splitlines())

for sample in SAMPLES:
    mkdir_p('logs/cluster/%s' % sample)
#checking for bams:

if config['project'].get('bam_list',False):
    with open(config['project']['bam_list'],'r') as b:
        BAMS=dict(line.split('\t') for line in b.read().splitlines())
else:
    BAMS=False
    missing_bam=0
    for sample in SAMPLES:
        if not os.path.isfile('bam_input/final/{sample}/{reference}/{sample}.ready.bam'.format(sample=sample,reference=config['resources']['reference']['key'])):
            print('WARNING: < %s > Missing BAM!' % sample)
            missing_bam+=1
        if missing_bam>0:
            raise

def paired_bams(wildcards):
    ref=config['resources']['reference']['key']
    tumor=wildcards.tumor
    normal=PAIRS[wildcards.tumor]
    return {'tumor':BAMS[wildcards.tumor],'normal':BAMS[normal]}

rule all_strelka2:
    input:
        expand("data/work/{tumor}/{targets}/strelka/somatic.raw.vcf.gz",tumor=PAIRS.keys(),targets=config['resources']['library']['targets_key'])

rule Manta:
    input:
        unpack(paired_bams)
    output:
        #bam output
        "data/work/{tumor}/{targets}/manta/results/variants/candidateSmallIndels.vcf.gz",
        "data/work/{tumor}/{targets}/manta/results/variants/candidateSV.vcf.gz",
        "data/work/{tumor}/{targets}/manta/results/variants/diploidSV.vcf.gz",
        "data/work/{tumor}/{targets}/manta/results/variants/somaticSV.vcf.gz"
    params:
        workdir="data/work/{tumor}/{targets}/manta",
        reference=config['resources']['reference']['fasta'],
        bedgz=config['resources']['library']['targets_bedgz']
    threads:
        4
    shell:
        """
        $HOME/software/manta/bin/configManta.py --normalBam {input.normal} --tumorBam {input.tumor} --referenceFasta {params.reference} --callRegions {params.bedgz} --exome --runDir {params.workdir}
        {params.workdir}/runWorkflow.py -m local -j {threads}
        """

rule Strelka2:#You sholuld put all concats in a differnt rule. Strelka wont work if the runWorkflow.py script already exists.
    input:
        unpack(paired_bams),
        indels="data/work/{tumor}/{targets}/manta/results/variants/candidateSmallIndels.vcf.gz"
    output:
        #bam output
        snvs="data/work/{tumor}/{targets}/strelka/results/variants/somatic.snvs.vcf.gz",#not snps
        indels="data/work/{tumor}/{targets}/strelka/results/variants/somatic.indels.vcf.gz",
        raw="data/work/{tumor}/{targets}/strelka/somatic.raw.vcf.gz"
    params:
        workdir="data/work/{tumor}/{targets}/strelka",
        reference=config['resources']['reference']['fasta'],
        bedgz=config['resources']['library']['targets_bedgz']
    threads:
        4
    shell:
        """
        $HOME/software/strelka/bin/configureStrelkaSomaticWorkflow.py --normalBam {input.normal} --tumorBam {input.tumor} --indelCandidates {input.indels} --referenceFasta {params.reference} --callRegions {params.bedgz} --exome --runDir {params.workdir}
        {params.workdir}/runWorkflow.py -m local -j {threads}
        bcftools concat -a --threads {threads} {output.snvs} {output.indels} | bcftools sort -O z -o {output.raw}
        tabix -p vcf {output.raw}
        """
        #can add -m, --max-mem <float>[kMG]    maximum memory to use [768M] for sort