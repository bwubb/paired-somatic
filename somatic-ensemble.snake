import errno
import os

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno==errno.EEXIST and os.path.isdir(path):
            pass

with open(config['project']['pair_list'],'r') as p:
    PAIRS=dict(line.split('\t') for line in p.read().splitlines())

TUMORS=PAIRS.keys()

rule ensemble:
    input: ""

rule somatic_bcftools_norm:
    input:
        "data/work/{lib}/{tumor}/{mode}/somatic.{vcf}.vcf.gz"
    output:
        "data/work/{lib}/{tumor}/{mode}/somatic.{vcf}.norm.vcf.gz"
    params:
        ref=config['reference']['fasta']
    shell:
        """
        tabix -f -p vcf {input}
        bcftools norm -m-both {input} | bcftools norm -f {params.ref} -cs | bcftools view -e 'ALT~\"*\"' -O z -o {output}
        tabix -f -p vcf {output}
        """

rule standardize_somatic_vcf:
    input:
        "data/work/{lib}/{tumor}/{mode}/somatic.{vcf}.norm.vcf.gz"
    output:
        "data/work/{lib}/{tumor}/{mode}/somatic.{vcf}.norm.std.vcf.gz"
    params:
        tumor=lambda wildcards: wildcards.tumor
        normal=lambda wildcards: PAIRS[wildcards.tumor]
        lib=config['resources']['targets_key']
        mode=lambda wildcards: wildcards.mode
    script:
        "standardize_somatic-vcf.py"
        #"standardize_somatic-vcf.py -T $1 -N $2 -L $lib"

#High confidence=n2pass
rule somatic_bcftools_isec:
    input:
        mutect="data/work/{lib}/{tumor}/mutect/somatic.twice_filtered.norm.std.vcf.gz",
        strelka="data/work/{lib}/{tumor}/strelka/somatic.raw.norm.std.vcf.gz",
        vardict="data/work/{lib}/{tumor}/vardict/somatic.twice_filtered.norm.std.vcf.gz",
        varscan="data/work/{lib}/{tumor}/varscan/somatic.fpfilter.norm.std.vcf.gz"
    params:
        outdir="data/work/{lib}/{tumor}/bcftools/somatic"
    output:
        "data/work/{lib}/{tumor}/bcftools/somatic/sites.txt"
    shell:
        "bcftools isec -n+2 -p {params.outdir} {input.mutect} {input.strelka} {input.vardict} {input.varscan}"
        #Additionally created vcfs are private calls.
        #Can be renamed and used.

rule concordant_somatic_calls:
    input:
        "data/work/{lib}/{tumor}/bcftools/sites.txt"
    output:
        high_conf_writer='data/work/{lib}/{tumor}/bcftools/somatic.high_confidence.vcf.gz',
        low_conf_writer='data/work/{lib}/{tumor}/bcftools/somatic.low_confidence.vcf.gz',
        failed_writer='data/work/{lib}/{tumor}/bcftools/somatic.failed_confidence.vcf.gz'
    params:
        tumor=lambda wildcards: wildcards.tumor
        normal=lambda wildcards: PAIRS[wildcards.tumor]
        lib=config['resources']['targets_key']
    script:
        "tumor-normal_somatic-ensemble-vcf.py"

rule annotate_confidence_vcf:
    input:
        'data/work/{lib}/{tumor}/bcftools/somatic.{confidence}.vcf.gz'
    output:
        'data/work/{lib}/{tumor}/bcftools/somatic.{confidence}.hg19_multianno.vcf'
    params:
        humandb='$HOME/resources/annovar/humandb/',
        output_p='data/work/{lib}/{tumor}/annovar/somatic.{confidence}'
    shell:
        "table_annovar.pl {input} {params.humandb} --buildver hg19 --vcfinput --outfile {params.output_p} --protocol refGene,cytoband,genomicSuperDups,dbscsnv11,avsnp150,dbnsfp35a,mcap,revel,popfreq_max_20150413,exac03,exac03nontcga,gnomad211_exome,intervar_20180118,icgc21,cosmic84_coding,cosmic84_noncoding,clinvar_20190305 --operation g,r,r,f,f,f,f,f,f,f,f,f,f,f,f,f,f -remove"

rule run_annovartools:
    input:
        'data/work/{lib}/{tumor}/bcftools/somatic.{confidence}.hg19_multianno.vcf'
    output:
        'data/work/{lib}/{tumor}/bcftools/somatic.{confidence}.hg19_multianno.report.tsv'
    params:
        header='/home/bwubb/resources/annovar/ensemble.somatic-annotation-header.20191018.txt',
        mode='paired',
        tumor='{tumor}'
        normal=lambda wildcards: PAIRS[wildcards.tumor]
    script:
        'annovartootls.v02.py'

