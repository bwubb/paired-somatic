import errno
import os


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno==errno.EEXIST and os.path.isdir(path):
            pass

#check for snakemake objects?
with open(config.get('project',{}).get('sample_list','samples.list'),'r') as s:
    SAMPLES=s.read().splitlines()

with open(config.get('project',{}).get('pair_list','pairs.list'),'r') as p:
    PAIRS=dict(line.split('\t') for line in p.read().splitlines())

for sample in SAMPLES:
    mkdir_p('logs/cluster/%s' % sample)
#checking for bams:

with open(config['project']['bam_list'],'r') as b:
    BAMS=dict(line.split('\t') for line in b.read().splitlines())

def paired_bams(wildcards):
    ref=config['reference']['key']
    tumor=wildcards.tumor
    normal=PAIRS[wildcards.tumor]
    return {'tumor':BAMS[wildcards.tumor],'normal':BAMS[normal]}

def initial_vardict_results(wildcards):
    return {'raw':f"data/work/{wildcards.targets}/{wildcards.tumor}/vardict/somatic.raw.vcf.gz",'filtered':f"data/work/{wildcards.targets}/{wildcards.tumor}/vardict/somatic.twice_filtered.vcf.gz"}

wildcard_constraints:
    work_dir=f"data/work/{config['resources']['targets_key']}",
    results_dir=f"data/final/{config['project']['name']}"

rule collect_vardict_somatic_results:
    input:
        raw_calls=expand("{results_dir}/{tumor}.{targets}.vardict.somatic.raw.vcf.gz",results_dir=f"data/final/{config['project']['name']}",targets=config['resources']['targets_key'],tumor=PAIRS.keys()),
        pass_calls=expand("{results_dir}/{tumor}.{targets}.vardict.somatic.twice_filtered.pass.vcf.gz",results_dir=f"data/final/{config['project']['name']}",targets=config['resources']['targets_key'],tumor=PAIRS.keys())

rule vardict_target:
    input:
        expand("{results_dir}/{tumor}.{targets}.vardict.somatic.twice_filtered.pass.vcf.gz",results_dir=f"data/final/{config['project']['name']}",targets=config['resources']['targets_key'],tumor=PAIRS.keys())

rule run_VarDictJava:#First a more lenient -P val, not sure what
    input:
        unpack(paired_bams)
    output:
        raw="{work_dir}/{tumor}/vardict/raw.vcf.gz"
    params:
        ref=config['reference']['fasta'],
        bed=config['resources']['targets_bed'],
        path="$HOME/software/VarDictJava/VarDict",
        normal=lambda wildcards: PAIRS[wildcards.tumor],
        AF_THR=0.01
    threads:
        4
    shell:#split to snps and indels
        """
        $HOME/software/VarDictJava/build/install/VarDict/bin/VarDict -th {threads} -G {params.ref} -f {params.AF_THR} -N {wildcards.tumor} -b '{input.tumor}|{input.normal}' -c 1 -S 2 -E 3 -g 4 {params.bed} | {params.path}/testsomatic.R | {params.path}/var2vcf_paired.pl -N '{wildcards.tumor}|{params.normal}' -f {params.AF_THR} | bgzip -c > {output.raw}
        tabix -p vcf {output.raw}
        """

rule VarDictFilter:
    input:
        "{work_dir}/{tumor}/vardict/raw.vcf.gz"
    output:
        somatic="{work_dir}/{tumor}/vardict/somatic.raw.vcf.gz",
        once="{work_dir}/{tumor}/vardict/once_filtered.vcf.gz",
        twice="{work_dir}/{tumor}/vardict/twice_filtered.vcf.gz"
    shell:
        """
        bcftools view -i 'INFO/STATUS==\"StrongSomatic\" || INFO/STATUS==\"LikelySomatic\"' -O z -o {output.somatic} {input}
        tabix -p vcf {output.somatic}
        bcftools filter --threads {threads} -e '((FORMAT/AF[0] * FORMAT/DP[0] < 6) && ((FORMAT/MQ[0] < 55.0 && FORMAT/NM[0] > 1.0) || (FORMAT/MQ[0] < 60.0 && FORMAT/NM[0] > 2.0) || (FORMAT/DP[0] < 10)))' -s filter_1 -m + -O z {input} > {output.once}
        tabix -p vcf {output.once}
        bcftools filter --threads {threads} -e 'FORMAT/AF[0] < 0.2 && FORMAT/QUAL[0] < 55 && INFO/SSF[0] > 0.06' -s filter_2 -m + -O z {output.once} > {output.twice}
        tabix -p vcf {output.twice}
        """
        #Dropped || (FORMAT/QUAL < 45)
        #bcftools view -f PASS -i 'INFO/STATUS=="StrongSomatic" || INFO/STATUS=="LikelySomatic"' > somatic

#Maybe filter is only good for somatic?
#What germline/loh are filtered out?
rule process_VarDict: #split vardict into loh, germline, somatic
    input:
        "{work_dir}/{tumor}/vardict/twice_filtered.vcf.gz"
    output:
        somatic="{work_dir}/{tumor}/vardict/somatic.twice_filtered.vcf.gz",
        loh="{work_dir}/{tumor}/vardict/loh.twice_filtered.vcf.gz",
        germline="{work_dir}/{tumor}/vardict/germline.twice_filtered.vcf.gz"
    shell:
        """
        bcftools view -i 'INFO/STATUS==\"StrongSomatic\" || INFO/STATUS==\"LikelySomatic\"' -O z -o {output.somatic} {input} && tabix -p vcf {output.somatic}
        bcftools view -i 'INFO/STATUS==\"StrongLOH\" || INFO/STATUS==\"LikelyLOH\"' -O z -o {output.loh} {input} && tabix -p vcf {output.loh}
        bcftools view -i 'INFO/STATUS==\"Germline\"' -O z -o {output.germline} {input} && tabix -p vcf {output.germline}
        """

rule VarDict_final:
    input:
        unpack(initial_vardict_results)
    output:
        raw_calls="{results_dir}/{tumor}.{targets}.vardict.somatic.raw.vcf.gz",
        pass_calls="{results_dir}/{tumor}.{targets}.vardict.somatic.twice_filtered.pass.vcf.gz"
    params:
        regions=config['resources']['targets_bedgz']
        #-T temp dir for sort
    shell:
        """
        bcftools view -R {params.regions} {input.raw} | bcftools sort -O z -o {output.raw_calls}
        bcftools view -f PASS -R {params.regions} {input.filtered} | bcftools sort -O z -o {output.pass_calls}
        """