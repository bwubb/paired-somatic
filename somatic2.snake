import tabix
import csv
import os
import errno
from pybedtools import BedTool

include: './mutect2.snake'
include: './strelka2.snake'
include: './vardictjava.snake'
include: './varscan2_somatic.snake'

#CHECK FOR sequenza-snakemake.R

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno==errno.EEXIST and os.path.isdir(path):
            pass

#sample_list in config, default is samples.list
with open(config['project']['sample_list'],'r') as i:
    SAMPLES=i.read().splitlines()
    for sample in SAMPLES:
        mkdir_p('logs/cluster/%s' % sample)

with open(config['project']['pair_list'],'r') as p:
    PAIRS=dict(line.split('\t') for line in p.read().splitlines())

WORKDIR=f"data/work/{config['resources']['targets_key']}"
TUMORS=PAIRS.keys()

wildcard_constraints:
    work_dir=f"data/work/{config['resources']['targets_key']}",
    results_dir=f"data/final/{config['project']['name']}"

rule all:
    input:
        mutect2=expand("{work_dir}/{tumor}/mutect2/somatic.twice_filtered.vcf.gz",work_dir=WORKDIR,tumor=TUMORS),
        strelka2=expand("{work_dir}/{tumor}/strelka2/somatic.raw.vcf.gz",work_dir=WORKDIR,tumor=TUMORS),
        vardictjava=expand("{work_dir}/{tumor}/vardict/somatic.twice_filtered.vcf.gz",work_dir=WORKDIR,tumor=TUMORS),
        varscan2=expand("{work_dir}/{tumor}/varscan2/somatic.fpfilter.vcf.gz",work_dir=WORKDIR,tumor=TUMORS)

rule all_somatic_pass:
    input:
        mutect2=expand("{results_dir}/{tumor}.{targets}.mutect2.somatic.twice_filtered.pass.vcf.gz",results_dir=f"data/final/{config['project']['name']}",targets=config['resources']['targets_key'],tumor=PAIRS.keys()),
        strelka2=expand("{results_dir}/{tumor}.{targets}.strelka2.somatic.pass.vcf.gz",results_dir=f"data/final/{config['project']['name']}",targets=config['resources']['targets_key'],tumor=PAIRS.keys()),
        vardictjava=expand("{results_dir}/{tumor}.{targets}.vardict.somatic.twice_filtered.pass.vcf.gz",results_dir=f"data/final/{config['project']['name']}",targets=config['resources']['targets_key'],tumor=PAIRS.keys()),
        varscan2=expand("{results_dir}/{tumor}.{targets}.varscan2.somatic.fpfilter.pass.vcf.gz",results_dir=f"data/final/{config['project']['name']}",targets=config['resources']['targets_key'],tumor=PAIRS.keys())

rule valdiate_vcf:
    input:
        "{file}.vcf"




