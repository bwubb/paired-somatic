import errno
import os

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno==errno.EEXIST and os.path.isdir(path):
            pass

with open(config['project']['pair_list'],'r') as p:
    PAIRS=dict(line.split('\t') for line in p.read().splitlines())

TUMORS=PAIRS.keys()

def loh_germline_ensemble():
    
    
#Switch to csv compatible.
rule all_loh_germline:
    input:
        [f'data/final/{tumor}/{TARGETS[tumor]}.loh_germline.hg19_multianno.tsv' for tumor in TUMORS]


rule vardict_merge_loh_germline:
    input:
        loh="{work_dir}/{tumor}/vardict/loh.twice_filtered.norm.clean.vcf.gz",
        germline="{work_dir}/{tumor}/vardict/germline.twice_filtered.norm.clean.vcf.gz"
    output:
        "{work_dir}/{tumor}/vardict/loh_germline.twice_filtered.norm.clean.vcf.gz"
    shell:
        #-a, --allow-overlaps First coordinate of the next file can precede last record of the current file.
        #-D, --remove-duplicates
        """
        bcftools concat -a -D {input.loh} {input.germline} | bcftools sort -O z -o {output}
        tabix -p vcf {output}
        """

rule varscan2_merge_loh_germline:
    input:
        loh="{work_dir}/{tumor}/varscan2/loh.fpfilter.norm.clean.vcf.gz",
        germline="{work_dir}/{tumor}/varscan2/germline.fpfilter.norm.clean.vcf.gz"
    output:
        "{work_dir}/{tumor}/varscan2/loh_germline.fpfilter.norm.clean.vcf.gz"
    params:
        
    shell:
        #-a, --allow-overlaps First coordinate of the next file can precede last record of the current file.
        #-D, --remove-duplicates
        """
        bcftools concat -a -D {input.loh} {input.germline} | bcftools sort -O z -o {output}
        tabix -p vcf {output}
        """


rule vardict_standardize_loh_germline_vcf:
    input:
        "data/work/{lib}/{tumor}/vardict/loh_germline.twice_filtered.norm.clean.vcf.gz"
    output:
        "data/work/{lib}/{tumor}/vardict/loh_germline.twice_filtered.norm.clean.std.vcf.gz"
    params:
        tumor=lambda wildcards: wildcards.tumor,
        normal=lambda wildcards: PAIRS[wildcards.tumor],
        lib=config['resources']['targets_key'],
        mode="vardict"
    script:
        "standardize_loh_germline-vcf.py"
        #"standardize_somatic-vcf.py -T $1 -N $2 -L $lib"

rule varscan2_standardize_loh_germline_vcf:
    input:
        "data/work/{lib}/{tumor}/varscan2/loh_germline.raw.norm.vcf.gz"
    output:
        "data/work/{lib}/{tumor}/varscan2/loh_germline.raw.norm.std.vcf.gz"
    params:
        tumor=lambda wildcards: wildcards.tumor,
        normal=lambda wildcards: PAIRS[wildcards.tumor],
        lib=config['resources']['targets_key'],
        mode="varscan2"
    script:
        "standardize_loh_germline-vcf.py"

rule loh_germline_bcftools_isec:
    input:
        vardict="data/work/{lib}/{tumor}/vardict/loh_germline.twice_filtered.norm.std.vcf.gz",
        varscan="data/work/{lib}/{tumor}/varscan2/loh_germline.raw.norm.std.vcf.gz"
    params:
        outdir="data/work/{lib}/{tumor}/bcftools/loh_germline"
    output:
        "data/work/{lib}/{tumor}/bcftools/loh_germline/sites.txt"
    shell:
        """
        bcftools isec -n+1 -p {params.outdir} {input.vardict} {input.varscan}
        """

rule concordant_loh_germline_calls:
    input:
        "data/work/{lib}/{tumor}/bcftools/loh_germline/sites.txt"
    output:
        "data/work/{lib}/{tumor}/bcftools/loh_germline/loh_germline_variants.vcf.gz"
    params:
        tumor=lambda wildcards: wildcards.tumor
        normal=lambda wildcards: PAIRS[wildcards.tumor]
        lib=config['resources']['targets_key']
    script:
        "tumor-normal_loh_germline-ensemble-vcf.py"

rule annotate_loh_germline_vcf:
    input:
        'data/work/{lib}/{tumor}/bcftools/loh_germline/loh_germline_variants.vcf.gz'
    output:
        'data/work/{lib}/{tumor}/annovar/loh_germline_variants.hg19_multianno.vcf'
    params:
        humandb='$HOME/resources/annovar/humandb/',
        output_p='data/work/{lib}/{tumor}/annovar/loh_germline'
    shell:
        """
        table_annovar.pl {input} {params.humandb} --buildver hg19 --vcfinput --outfile {params.output_p} --protocol refGene,cytoband,genomicSuperDups,dbscsnv11,avsnp150,dbnsfp35a,mcap,revel,popfreq_max_20150413,exac03,exac03nontcga,gnomad211_exome,intervar_20180118,icgc21,cosmic84_coding,cosmic84_noncoding,clinvar_20190305 --operation g,r,r,f,f,f,f,f,f,f,f,f,f,f,f,f,f -remove
        """

rule run_annovartools:
    input:
        'data/work/{lib}/{tumor}/bcftools/somatic.{confidence}.hg19_multianno.vcf'
    output:
        'data/work/{lib}/{tumor}/bcftools/somatic.{confidence}.hg19_multianno.report.csv'
    params:
        header='/home/bwubb/resources/annovar/ensemble.somatic-annotation-header.20191018.txt',
        mode='paired',
        tumor='{tumor}'
        normal=lambda wildcards: PAIRS[wildcards.tumor]
    script:
        'annovartootls.v02.py'

#vcf stats!
#bcftools stats with intervals
rule validate_loh_germline_vcf:
    input:
    output:
    shell: